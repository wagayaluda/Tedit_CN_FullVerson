<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Go" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <UsingTask TaskName="DateStampVersion" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
        <ParameterGroup>
            <Items ParameterType="Microsoft.Build.Framework.ITaskItem[]" />
        </ParameterGroup>
        <Task>
		    <Using Namespace="System" />
            <Using Namespace="System.IO" />
			<Using Namespace="System.Text" />
            <Using Namespace="System.Text.RegularExpressions" />
            <Using Namespace="Microsoft.Build.Framework" />
            <Code Type="Fragment" Language="cs">
				<![CDATA[
					// Generate Version Numbers
					string datedBuildNumber = string.Format("{0}{1:000}", DateTime.Now.ToString("yy"), DateTime.Now.DayOfYear);
					string revisionNumber = DateTime.Now.ToString("HHmm");

					foreach (ITaskItem item in Items)
					{
						// Find Current Version in file
						string fileName = item.GetMetadata("FullPath");

						string versionFormat = @"(?<major>[0-9]+)\.(?<minor>[0-9]+)\.(?<build>[0-9]+)\.(?<revision>[0-9]+)";

						string findAssmVers = @"AssemblyVersion\(\""" + versionFormat;
						string findAssmFileVers = @"AssemblyFileVersion\(\""" + versionFormat;
						string findWixVers = @"Version=""" + versionFormat + "\"";
						string findTxtVers = "v" +versionFormat;
						
						Log.LogMessage(MessageImportance.Normal, "Updating Version File: " + fileName);
						
						if (!File.Exists(fileName))
						{
							Log.LogError(null, null, null, null, 0, 0, 0, 0, String.Format("Could not find version file: {0}", fileName), new object[0]);
						}
						bool isUnicode = false;// fileName.EndsWith(".txt");
						string content = isUnicode ? File.ReadAllText(fileName, System.Text.Encoding.Unicode) : File.ReadAllText(fileName);

						var m = Regex.Match(content, findAssmVers);
						if (!m.Success)
						{
							m = Regex.Match(content, findWixVers);
						}
						if (!m.Success)
						{
							m = Regex.Match(content, findTxtVers);
						}
						if (!m.Success)
						{
							Log.LogError(null, null, null, null, 0, 0, 0, 0, "No Version number found! Aborting: " + content, new object[0]);
							continue;
						}
						
						string wixVers = string.Format(
								  "Version=\"{0}.{1}.{2}.{3}\"",
								  m.Groups["major"].Value,
								  m.Groups["minor"].Value,
								  datedBuildNumber,
								  revisionNumber);
								  
						string txtVers = string.Format(
								  "v{0}.{1}.{2}.{3}",
								  m.Groups["major"].Value,
								  m.Groups["minor"].Value,
								  datedBuildNumber,
								  revisionNumber);

						// Generate new Version Numbers
						string assmVers = string.Format("AssemblyVersion(\"{0}.{1}.0.0",
												  m.Groups["major"].Value,
												  m.Groups["minor"].Value);

						string assmFileVers = string.Format(
								  "AssemblyFileVersion(\"{0}.{1}.{2}.{3}",
								  m.Groups["major"].Value,
								  m.Groups["minor"].Value,
								  datedBuildNumber,
								  revisionNumber);

						Log.LogMessage(MessageImportance.Normal,  "New Version: " + txtVers);
						// Write new version numbers
						string result = Regex.Replace(content, findAssmVers, assmVers);
						result = Regex.Replace(result, findAssmFileVers, assmFileVers);
						result = Regex.Replace(result, findWixVers, wixVers);
						result = Regex.Replace(result, findTxtVers, txtVers);

						if (isUnicode) File.WriteAllText(fileName, result, System.Text.Encoding.Unicode);
						else File.WriteAllText(fileName, result);
					}
				]]>
            </Code>
        </Task>
    </UsingTask>
</Project>